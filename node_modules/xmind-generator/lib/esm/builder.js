import { makeSheetBuilder } from "./internal/builder/sheet-builder.js";
import { makeTopicBuilder } from "./internal/builder/topic-builder.js";
import { makeWorkbookBuilder } from "./internal/builder/workbook-builder.js";
import { archive } from "./internal/serializer.js";
import { makeRelationshipBuilder } from "./internal/builder/relationship-builder.js";
import { asBuilder } from "./internal/builder/types.js";
export function Topic(title) {
  return makeTopicBuilder(title);
}
export function Relationship(title, attributes) {
  return makeRelationshipBuilder(title, attributes);
}
export function Sheet(title) {
  return makeSheetBuilder(title);
}
export function Summary(title, attributes) {
  const topicBuilder = makeTopicBuilder(title);
  return {
    ref(ref) {
      topicBuilder.ref(ref);
      return this;
    },
    children(topicBuilders) {
      topicBuilder.children(topicBuilders);
      return this;
    },
    image(data) {
      topicBuilder.image(data);
      return this;
    },
    note(newNote) {
      topicBuilder.note(newNote);
      return this;
    },
    labels(labels) {
      topicBuilder.labels(labels);
      return this;
    },
    markers(markers) {
      topicBuilder.markers(markers);
      return this;
    },
    build: () => {
      return {
        info: { title, from: attributes.from, to: attributes.to },
        ...asBuilder(topicBuilder).build()
      };
    }
  };
}
export function RootTopic(title) {
  const sheetBuilder = makeSheetBuilder();
  const topicBuilder = makeTopicBuilder(title);
  sheetBuilder.rootTopic(topicBuilder);
  return {
    ref(ref) {
      topicBuilder.ref(ref);
      return this;
    },
    sheetTitle(title2) {
      sheetBuilder.title(title2);
      return this;
    },
    children(topicBuilders) {
      topicBuilder.children(topicBuilders);
      return this;
    },
    summaries(summaries) {
      topicBuilder.summaries(summaries);
      return this;
    },
    relationships(relationships) {
      sheetBuilder.relationships(relationships);
      return this;
    },
    image(data) {
      topicBuilder.image(data);
      return this;
    },
    note(newNote) {
      topicBuilder.note(newNote);
      return this;
    },
    labels(labels) {
      topicBuilder.labels(labels);
      return this;
    },
    markers(markers) {
      topicBuilder.markers(markers);
      return this;
    },
    build: asBuilder(sheetBuilder).build
  };
}
export function Workbook(rootBuilder) {
  const workbook = asBuilder(
    makeWorkbookBuilder(Array.isArray(rootBuilder) ? rootBuilder : [rootBuilder])
  ).build();
  return {
    archive: () => archive(workbook)
  };
}
