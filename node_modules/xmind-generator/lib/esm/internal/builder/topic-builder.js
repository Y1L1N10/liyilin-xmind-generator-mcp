import { Topic } from "../model/topic.js";
import { makeReference, mergeReferences } from "./ref.js";
import { asBuilder } from "./types.js";
export function makeTopicBuilder(title) {
  let _ref;
  let _image;
  let _note;
  let _markers = [];
  let _labels = [];
  const childBuilders = [];
  const summaryBuilders = [];
  return {
    ref(ref) {
      _ref = ref;
      return this;
    },
    children(builders) {
      childBuilders.push(...builders);
      return this;
    },
    image(data) {
      _image = data;
      return this;
    },
    note(newNote) {
      _note = newNote;
      return this;
    },
    labels(labels) {
      _labels.push(...labels);
      return this;
    },
    markers(markers) {
      _markers.push(...markers);
      return this;
    },
    summaries(summaries) {
      summaryBuilders.push(...summaries);
      return this;
    },
    build() {
      const childTopics = [];
      const childReferences = [];
      const summaryReferences = [];
      childBuilders.forEach((builder) => {
        const { topic: topic2, reference: reference2 } = asBuilder(
          builder
        ).build();
        childTopics.push(topic2);
        childReferences.push(reference2);
      });
      const attributes = {
        ref: _ref,
        note: _note,
        markers: _markers,
        labels: _labels
      };
      const topic = new Topic(title, attributes, childTopics);
      if (_image) {
        topic.addImage(_image);
      }
      let reference = mergeReferences([
        makeReference(attributes?.ref ? { [attributes.ref]: topic } : {}),
        makeReference({ [topic.title]: topic }),
        ...childReferences,
        ...summaryReferences
      ]);
      summaryBuilders.forEach((summaryBuilder) => {
        const {
          info,
          topic: summaryTopic,
          reference: summaryReference
        } = asBuilder(
          summaryBuilder
        ).build();
        reference = mergeReferences([summaryReference, reference]);
        const fromIdentifier = typeof info.from === "number" ? info.from : reference.fetch(info.from).id;
        const toIdentifier = typeof info.to === "number" ? info.to : reference.fetch(info.to).id;
        topic.addSummary(info.title, fromIdentifier, toIdentifier, summaryTopic);
      });
      return { topic, reference };
    }
  };
}
