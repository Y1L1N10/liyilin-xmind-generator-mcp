"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Relationship = Relationship;
exports.RootTopic = RootTopic;
exports.Sheet = Sheet;
exports.Summary = Summary;
exports.Topic = Topic;
exports.Workbook = Workbook;
var _sheetBuilder = require("./internal/builder/sheet-builder.cjs");
var _topicBuilder = require("./internal/builder/topic-builder.cjs");
var _workbookBuilder = require("./internal/builder/workbook-builder.cjs");
var _serializer = require("./internal/serializer.cjs");
var _relationshipBuilder = require("./internal/builder/relationship-builder.cjs");
var _types = require("./internal/builder/types.cjs");
function Topic(title) {
  return (0, _topicBuilder.makeTopicBuilder)(title);
}
function Relationship(title, attributes) {
  return (0, _relationshipBuilder.makeRelationshipBuilder)(title, attributes);
}
function Sheet(title) {
  return (0, _sheetBuilder.makeSheetBuilder)(title);
}
function Summary(title, attributes) {
  const topicBuilder = (0, _topicBuilder.makeTopicBuilder)(title);
  return {
    ref(ref) {
      topicBuilder.ref(ref);
      return this;
    },
    children(topicBuilders) {
      topicBuilder.children(topicBuilders);
      return this;
    },
    image(data) {
      topicBuilder.image(data);
      return this;
    },
    note(newNote) {
      topicBuilder.note(newNote);
      return this;
    },
    labels(labels) {
      topicBuilder.labels(labels);
      return this;
    },
    markers(markers) {
      topicBuilder.markers(markers);
      return this;
    },
    build: () => {
      return {
        info: {
          title,
          from: attributes.from,
          to: attributes.to
        },
        ...(0, _types.asBuilder)(topicBuilder).build()
      };
    }
  };
}
function RootTopic(title) {
  const sheetBuilder = (0, _sheetBuilder.makeSheetBuilder)();
  const topicBuilder = (0, _topicBuilder.makeTopicBuilder)(title);
  sheetBuilder.rootTopic(topicBuilder);
  return {
    ref(ref) {
      topicBuilder.ref(ref);
      return this;
    },
    sheetTitle(title2) {
      sheetBuilder.title(title2);
      return this;
    },
    children(topicBuilders) {
      topicBuilder.children(topicBuilders);
      return this;
    },
    summaries(summaries) {
      topicBuilder.summaries(summaries);
      return this;
    },
    relationships(relationships) {
      sheetBuilder.relationships(relationships);
      return this;
    },
    image(data) {
      topicBuilder.image(data);
      return this;
    },
    note(newNote) {
      topicBuilder.note(newNote);
      return this;
    },
    labels(labels) {
      topicBuilder.labels(labels);
      return this;
    },
    markers(markers) {
      topicBuilder.markers(markers);
      return this;
    },
    build: (0, _types.asBuilder)(sheetBuilder).build
  };
}
function Workbook(rootBuilder) {
  const workbook = (0, _types.asBuilder)((0, _workbookBuilder.makeWorkbookBuilder)(Array.isArray(rootBuilder) ? rootBuilder : [rootBuilder])).build();
  return {
    archive: () => (0, _serializer.archive)(workbook)
  };
}