import type { RefString } from './internal/model/topic';
import type { MarkerId } from './marker';
import type { NamedResourceData } from './storage';
export declare function Topic(title: string): TopicBuilder;
export declare function Relationship(title: string, attributes: {
    from: string;
    to: string;
}): RelationshipBuilder;
export declare function Sheet(title?: string): SheetBuilder;
export declare function Summary(title: string, attributes: {
    from: string | number;
    to: string | number;
}): SummaryBuilder;
export declare function RootTopic(title: string): RootTopicBuilder;
export declare function Workbook(rootBuilder: ReadonlyArray<RootTopicBuilder> | RootTopicBuilder): {
    archive: () => Promise<ArrayBuffer>;
};
export type WorkbookBuilder = {
    archive(): Promise<ArrayBuffer>;
};
interface BaseTopicBuilder {
    ref: (ref: RefString) => this;
    children: (topicBuilders: ReadonlyArray<TopicBuilder>) => this;
    image: (data: NamedResourceData) => this;
    note: (newNote: string) => this;
    labels: (labels: ReadonlyArray<string>) => this;
    markers: (markers: ReadonlyArray<MarkerId>) => this;
}
export interface TopicBuilder extends BaseTopicBuilder {
    summaries: (summaries: ReadonlyArray<SummaryBuilder>) => this;
}
export interface RootTopicBuilder extends BaseTopicBuilder {
    sheetTitle: (title: string) => this;
    relationships: (relationships: ReadonlyArray<RelationshipBuilder>) => this;
    summaries: (summaries: ReadonlyArray<SummaryBuilder>) => this;
}
export interface SummaryBuilder extends BaseTopicBuilder {
}
export interface SheetBuilder {
    rootTopic: (topicBuilder: TopicBuilder) => this;
    relationships: (relationships: ReadonlyArray<RelationshipBuilder>) => this;
    title: (sheetTitle: string) => this;
}
export interface RelationshipBuilder {
}
export {};
