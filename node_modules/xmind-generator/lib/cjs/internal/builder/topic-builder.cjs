"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeTopicBuilder = makeTopicBuilder;
var _topic = require("../model/topic.cjs");
var _ref2 = require("./ref.cjs");
var _types = require("./types.cjs");
function makeTopicBuilder(title) {
  let _ref;
  let _image;
  let _note;
  let _markers = [];
  let _labels = [];
  const childBuilders = [];
  const summaryBuilders = [];
  return {
    ref(ref) {
      _ref = ref;
      return this;
    },
    children(builders) {
      childBuilders.push(...builders);
      return this;
    },
    image(data) {
      _image = data;
      return this;
    },
    note(newNote) {
      _note = newNote;
      return this;
    },
    labels(labels) {
      _labels.push(...labels);
      return this;
    },
    markers(markers) {
      _markers.push(...markers);
      return this;
    },
    summaries(summaries) {
      summaryBuilders.push(...summaries);
      return this;
    },
    build() {
      const childTopics = [];
      const childReferences = [];
      const summaryReferences = [];
      childBuilders.forEach(builder => {
        const {
          topic: topic2,
          reference: reference2
        } = (0, _types.asBuilder)(builder).build();
        childTopics.push(topic2);
        childReferences.push(reference2);
      });
      const attributes = {
        ref: _ref,
        note: _note,
        markers: _markers,
        labels: _labels
      };
      const topic = new _topic.Topic(title, attributes, childTopics);
      if (_image) {
        topic.addImage(_image);
      }
      let reference = (0, _ref2.mergeReferences)([(0, _ref2.makeReference)(attributes?.ref ? {
        [attributes.ref]: topic
      } : {}), (0, _ref2.makeReference)({
        [topic.title]: topic
      }), ...childReferences, ...summaryReferences]);
      summaryBuilders.forEach(summaryBuilder => {
        const {
          info,
          topic: summaryTopic,
          reference: summaryReference
        } = (0, _types.asBuilder)(summaryBuilder).build();
        reference = (0, _ref2.mergeReferences)([summaryReference, reference]);
        const fromIdentifier = typeof info.from === "number" ? info.from : reference.fetch(info.from).id;
        const toIdentifier = typeof info.to === "number" ? info.to : reference.fetch(info.to).id;
        topic.addSummary(info.title, fromIdentifier, toIdentifier, summaryTopic);
      });
      return {
        topic,
        reference
      };
    }
  };
}