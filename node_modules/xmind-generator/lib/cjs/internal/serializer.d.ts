import type { Relationship } from './model/relationship';
import type { Sheet } from './model/sheet';
import type { Summary } from './model/summary';
import type { Topic } from './model/topic';
import type { Workbook } from './model/workbook';
import type { NamedResourceData } from '../storage';
type JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;
type JSONObject = {
    [x: string]: JSONValue;
};
export declare function asJSONObject(whatever: unknown): JSONObject;
export declare function asJSONArray(whatever: unknown): Array<JSONValue>;
export declare function serializeWorkbook(workbook: Workbook, imageResourceSetter: (imageData: NamedResourceData) => Promise<string | null>): Promise<ReadonlyArray<JSONObject>>;
export declare function serializeSheet(sheet: Sheet, imageResourceSetter: (imageData: NamedResourceData) => Promise<string | null>): Promise<Readonly<JSONObject>>;
export declare function serializeTopic(topic: Topic | Readonly<Topic>, imageResourceSetter: (imageData: NamedResourceData) => Promise<string | null>): Promise<Readonly<JSONObject>>;
export declare function serializeRelationship(relationship: Relationship): Readonly<JSONObject>;
export declare function serializeSummaryInfo(topic: Readonly<Topic>, summary: Summary): Readonly<JSONObject> | null;
export declare function archive(workbook: Workbook): Promise<ArrayBuffer>;
export {};
